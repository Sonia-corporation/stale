"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8734],{3001:e=>{e.exports=JSON.parse('{"permalink":"/stale/blog/first-inclusive-input","editUrl":"https://github.com/Sonia-corporation/stale/tree/develop/documentation/blog/2022-02-11-first-inclusive-input/index.mdx","source":"@site/blog/2022-02-11-first-inclusive-input/index.mdx","title":"The first inclusive filter input is here!","description":"This stale action now contains the first input of the genre: an inclusive filter!\\nThis will change how the ignoring process can be leverage to process only items that matters!\\n","date":"2022-02-11T00:00:00.000Z","tags":[{"inline":true,"label":"input","permalink":"/stale/blog/tags/input"},{"inline":true,"label":"new kind","permalink":"/stale/blog/tags/new-kind"},{"inline":true,"label":"ignoring process","permalink":"/stale/blog/tags/ignoring-process"},{"inline":true,"label":"projects","permalink":"/stale/blog/tags/projects"},{"inline":true,"label":"inclusive criteria","permalink":"/stale/blog/tags/inclusive-criteria"}],"readingTime":1.195,"hasTruncateMarker":true,"authors":[{"name":"Geoffrey \\"C0ZEN\\" Testelin","title":"Creator and maintainer of this Sonia stale action","url":"https://github.com/C0ZEN","imageURL":"https://github.com/C0ZEN.png","key":"C0ZEN","page":null}],"frontMatter":{"slug":"first-inclusive-input","title":"The first inclusive filter input is here!","description":"This stale action now contains the first input of the genre: an inclusive filter!\\nThis will change how the ignoring process can be leverage to process only items that matters!\\n","authors":["C0ZEN"],"tags":["input","new kind","ignoring process","projects","inclusive criteria"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"The new UI is here!","permalink":"/stale/blog/new-ui"},"nextItem":{"title":"Welcome!","permalink":"/stale/blog/welcome"}}')},3374:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});var n=i(3001),s=i(4848),o=i(8453);const r={slug:"first-inclusive-input",title:"The first inclusive filter input is here!",description:"This stale action now contains the first input of the genre: an inclusive filter!\nThis will change how the ignoring process can be leverage to process only items that matters!\n",authors:["C0ZEN"],tags:["input","new kind","ignoring process","projects","inclusive criteria"],hide_table_of_contents:!1},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"TL;DR",id:"tldr",level:2},{value:"A bit of context",id:"a-bit-of-context",level:2},{value:"What is new?",id:"what-is-new",level:2},{value:"Why is that so important?",id:"why-is-that-so-important",level:2}];function u(e){const t={a:"a",admonition:"admonition",br:"br",em:"em",h2:"h2",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The first input of the inclusive filtering kind is out!"}),"\n",(0,s.jsx)(t.h2,{id:"tldr",children:"TL;DR"}),"\n",(0,s.jsxs)(t.p,{children:["The input ",(0,s.jsx)(t.a,{href:"../docs/issues/inputs/issue-only-any-projects-input",children:"issue-only-any-projects"})," is out!",(0,s.jsx)(t.br,{}),"\n","You can now only process your issues when they are linked to a project."]}),"\n",(0,s.jsx)(t.h2,{id:"a-bit-of-context",children:"A bit of context"}),"\n",(0,s.jsx)(t.p,{children:"All the inputs added so far were useful to ignore all the items not having certain criteria."}),"\n",(0,s.jsxs)(t.p,{children:["For example, the only inputs available to ignore the processing of issues for a project were the ",(0,s.jsx)(t.a,{href:"../docs/issues/inputs/issue-ignore-all-projects-input",children:"issue-ignore-all-projects"})," and the ",(0,s.jsx)(t.a,{href:"../docs/issues/inputs/issue-ignore-any-projects-input",children:"issue-ignore-any-projects"})," inputs.",(0,s.jsx)(t.br,{}),"\n","But what if you only wish to process issues that belongs to a specific project?",(0,s.jsx)(t.br,{}),"\n","You simply couldn't!"]}),"\n",(0,s.jsx)(t.p,{children:"Having inputs to reverse the logic to only process by using inclusive criteria was not something possible so far."}),"\n",(0,s.jsx)(t.h2,{id:"what-is-new",children:"What is new?"}),"\n",(0,s.jsxs)(t.p,{children:["To tackle this issue and be able to only process issues that belongs to a specific project or to a specific list of projects, we needed a new input.",(0,s.jsx)(t.br,{}),"\n","So, the input ",(0,s.jsx)(t.a,{href:"../docs/issues/inputs/issue-only-any-projects-input",children:"issue-only-any-projects"})," was created for this purpose."]}),"\n",(0,s.jsx)(t.h2,{id:"why-is-that-so-important",children:"Why is that so important?"}),"\n",(0,s.jsxs)(t.p,{children:["Developing those features are not that hard, but thinking about how to combine them all together in a way that makes sense is a bit more difficult.",(0,s.jsx)(t.br,{}),"\n","But now we have a recipe to ",(0,s.jsx)(t.em,{children:"inclusive inputs"}),", and we will be able to provide more functionalities following the same scheme! ","\ud83d\ude80"]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["You can see an ",(0,s.jsx)(t.a,{href:"../docs/examples/multiple-cron-example",children:"advanced example"})," to configure different workflows with multiple cron that may help you fine-tune even more the action."]})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var n=i(6540);const s={},o=n.createContext(s);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);