{"version":3,"sources":["utils/logger/logger-format.service.ts","utils/link/create-link.ts","utils/link/create-input-link.ts","utils/logger/logger.service.ts","core/inputs/inputs.service.ts","core/stale.service.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"..\\src","sourcesContent":["import styles, { ForegroundColor, Modifier } from 'ansi-styles';\r\n\r\ntype IMessage = string | boolean;\r\n\r\n/**\r\n * @description\r\n * Utility to change the logs colour or the font style\r\n */\r\nexport class LoggerFormatService {\r\n  public static whiteBright(message: Readonly<IMessage>): string {\r\n    return this._format(message, `whiteBright`);\r\n  }\r\n\r\n  public static yellowBright(message: Readonly<IMessage>): string {\r\n    return this._format(message, `yellowBright`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for the links\r\n   * @param {Readonly<IMessage>} message The message to display in magenta\r\n   * @returns {string} The message in magenta\r\n   */\r\n  public static magenta(message: Readonly<IMessage>): string {\r\n    return this._format(message, `magenta`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for the values to highlight\r\n   * @param {Readonly<IMessage>} message The message to display in cyan\r\n   * @returns {string} The message in cyan\r\n   */\r\n  public static cyan(message: Readonly<IMessage>): string {\r\n    return this._format(message, `cyan`);\r\n  }\r\n\r\n  public static yellow(message: Readonly<IMessage>): string {\r\n    return this._format(message, `yellow`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for standard text which is not important\r\n   * @param {Readonly<IMessage>} message The message to display in white\r\n   * @returns {string} The message in white\r\n   */\r\n  public static white(message: Readonly<IMessage>): string {\r\n    return this._format(message, `white`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for the successful messages\r\n   * @param {Readonly<IMessage>} message The message to display in green\r\n   * @returns {string} The message in green\r\n   */\r\n  public static green(message: Readonly<IMessage>): string {\r\n    return this._format(message, `green`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for the error messages\r\n   * @param {Readonly<IMessage>} message The message to display in red\r\n   * @returns {string} The message in red\r\n   */\r\n  public static red(message: Readonly<IMessage>): string {\r\n    return this._format(message, `red`);\r\n  }\r\n\r\n  public static blue(message: Readonly<IMessage>): string {\r\n    return this._format(message, `blue`);\r\n  }\r\n\r\n  public static bold(message: Readonly<IMessage>): string {\r\n    return this._format(message, `bold`);\r\n  }\r\n\r\n  private static _format(message: Readonly<IMessage>, style: keyof Modifier | keyof ForegroundColor): string {\r\n    return `${styles[style].open}${message}${styles[style].close}`;\r\n  }\r\n}\r\n","import terminalLink from 'terminal-link';\n\n/**\n * @description\n * Utility to create a link used to improve the logger and debug experience\n * @param {Readonly<string>} name The name of the link\n * @param {Readonly<string>} link The URL associated\n * @returns {string} A link in the markdown format\n */\nexport function createLink(name: Readonly<string>, link: Readonly<string>): string {\n  return terminalLink(name, link);\n}\n","import { createLink } from './create-link';\nimport { EInputs } from '../../core/inputs/inputs.enum';\n\n/**\n * @description\n * Utility to create a link based on an input coming from the README.md\n * @param {Readonly<EInputs>} input The input to link to\n * @returns {string} A link in the markdown format pointing to the given input anchor in the README.md\n */\nexport function createInputLink(input: Readonly<EInputs>): string {\n  return createLink(input, `https://github.com/@sonia-corporation/stale#${input}`);\n}\n","import { LoggerFormatService } from './logger-format.service';\r\nimport { EInputs } from '../../core/inputs/inputs.enum';\r\nimport { createInputLink } from '../link/create-input-link';\r\nimport core from '@actions/core';\r\n\r\n/**\r\n * @description\r\n * Utility to log\r\n */\r\nexport class LoggerService {\r\n  public static debug(...message: ReadonlyArray<string>): LoggerService {\r\n    core.debug(LoggerFormatService.whiteBright(message.join(` `)));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static notice(...message: ReadonlyArray<string>): LoggerService {\r\n    core.notice(LoggerFormatService.whiteBright(message.join(` `)));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static warning(...message: ReadonlyArray<string>): LoggerService {\r\n    core.warning(LoggerFormatService.whiteBright(message.join(` `)));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static error(...message: ReadonlyArray<string>): LoggerService {\r\n    core.error(LoggerFormatService.whiteBright(message.join(` `)));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static async group(message: Readonly<string>, fn: () => Promise<void>): Promise<void> {\r\n    return core.group(LoggerFormatService.whiteBright(message), fn);\r\n  }\r\n\r\n  public static startGroup(name: Readonly<string>): LoggerService {\r\n    core.startGroup(LoggerFormatService.whiteBright(name));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static endGroup(): LoggerService {\r\n    core.endGroup();\r\n\r\n    return this;\r\n  }\r\n\r\n  public static input(input: Readonly<EInputs>): string {\r\n    return LoggerFormatService.magenta(createInputLink(input));\r\n  }\r\n}\r\n","import { EInputs } from './inputs.enum';\r\nimport { IInputs } from './inputs.interface';\r\nimport { LoggerFormatService } from '../../utils/logger/logger-format.service';\r\nimport { LoggerService } from '../../utils/logger/logger.service';\r\nimport core from '@actions/core';\r\nimport _ from 'lodash';\r\n\r\nexport class InputsService {\r\n  public static inputs: IInputs | undefined = undefined;\r\n\r\n  public static initialize(): InputsService {\r\n    InputsService.setInputs();\r\n\r\n    return this;\r\n  }\r\n\r\n  public static setInputs(): IInputs {\r\n    InputsService.inputs = {\r\n      githubToken: core.getInput(`github-token`, { required: true }),\r\n    };\r\n\r\n    return InputsService.inputs;\r\n  }\r\n\r\n  public static logInputs(): InputsService {\r\n    LoggerService.startGroup(`Inputs`);\r\n\r\n    _.forEach(this.inputs, (value: Readonly<string | boolean>, key: Readonly<string>): void => {\r\n      LoggerService.debug(\r\n        LoggerFormatService.white(`├──`),\r\n        LoggerService.input(_.kebabCase(key) as EInputs),\r\n        LoggerFormatService.cyan(value)\r\n      );\r\n    });\r\n\r\n    LoggerService.endGroup();\r\n\r\n    return InputsService;\r\n  }\r\n}\r\n","import { InputsService } from './inputs/inputs.service';\r\n\r\nexport class StaleService {\r\n  public static initialize(): StaleService {\r\n    InputsService.initialize();\r\n\r\n    return this;\r\n  }\r\n}\r\n","import { StaleService } from './core/stale.service';\r\n\r\n/**\r\n * @description\r\n * Start the main logic of this action\r\n */\r\nfunction initialize(): void {\r\n  StaleService.initialize();\r\n}\r\n\r\nvoid initialize();\r\n"]}