{"mappings":"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","sources":["src/main.ts","src/core/stale.service.ts","src/core/inputs/inputs.service.ts","src/utils/logger/logger-format.service.ts","src/utils/logger/logger.service.ts","src/utils/link/create-input-link.ts","src/utils/link/create-link.ts"],"sourcesContent":["import { StaleService } from './core/stale.service';\n\n/**\n * @description\n * Start the main logic of this action\n */\nfunction initialize(): void {\n  StaleService.initialize();\n}\n\nvoid initialize();\n","import { InputsService } from './inputs/inputs.service';\r\n\r\nexport class StaleService {\r\n  public static initialize(): StaleService {\r\n    InputsService.initialize();\r\n\r\n    return this;\r\n  }\r\n}\r\n","import { EInputs } from './inputs.enum';\r\nimport { IInputs } from './inputs.interface';\r\nimport { LoggerFormatService } from '../../utils/logger/logger-format.service';\r\nimport { LoggerService } from '../../utils/logger/logger.service';\r\nimport core from '@actions/core';\r\nimport _ from 'lodash';\r\n\r\nexport class InputsService {\r\n  public static inputs: IInputs | undefined = undefined;\r\n\r\n  public static initialize(): InputsService {\r\n    InputsService.setInputs();\r\n\r\n    return this;\r\n  }\r\n\r\n  public static setInputs(): IInputs {\r\n    InputsService.inputs = {\r\n      githubToken: core.getInput(`github-token`, { required: true }),\r\n    };\r\n\r\n    return InputsService.inputs;\r\n  }\r\n\r\n  public static logInputs(): InputsService {\r\n    LoggerService.startGroup(`Inputs`);\r\n\r\n    _.forEach(this.inputs, (value: Readonly<string | boolean>, key: Readonly<string>): void => {\r\n      LoggerService.debug(\r\n        LoggerFormatService.white(`├──`),\r\n        LoggerService.input(_.kebabCase(key) as EInputs),\r\n        LoggerFormatService.cyan(value)\r\n      );\r\n    });\r\n\r\n    LoggerService.endGroup();\r\n\r\n    return InputsService;\r\n  }\r\n}\r\n","import styles, { ForegroundColor, Modifier } from 'ansi-styles';\r\n\r\ntype IMessage = string | boolean;\r\n\r\n/**\r\n * @description\r\n * Utility to change the logs colour or the font style\r\n */\r\nexport class LoggerFormatService {\r\n  public static whiteBright(message: Readonly<IMessage>): string {\r\n    return this._format(message, `whiteBright`);\r\n  }\r\n\r\n  public static yellowBright(message: Readonly<IMessage>): string {\r\n    return this._format(message, `yellowBright`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for the links\r\n   * @param {Readonly<IMessage>} message The message to display in magenta\r\n   * @returns {string} The message in magenta\r\n   */\r\n  public static magenta(message: Readonly<IMessage>): string {\r\n    return this._format(message, `magenta`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for the values to highlight\r\n   * @param {Readonly<IMessage>} message The message to display in cyan\r\n   * @returns {string} The message in cyan\r\n   */\r\n  public static cyan(message: Readonly<IMessage>): string {\r\n    return this._format(message, `cyan`);\r\n  }\r\n\r\n  public static yellow(message: Readonly<IMessage>): string {\r\n    return this._format(message, `yellow`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for standard text which is not important\r\n   * @param {Readonly<IMessage>} message The message to display in white\r\n   * @returns {string} The message in white\r\n   */\r\n  public static white(message: Readonly<IMessage>): string {\r\n    return this._format(message, `white`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for the successful messages\r\n   * @param {Readonly<IMessage>} message The message to display in green\r\n   * @returns {string} The message in green\r\n   */\r\n  public static green(message: Readonly<IMessage>): string {\r\n    return this._format(message, `green`);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Used for the error messages\r\n   * @param {Readonly<IMessage>} message The message to display in red\r\n   * @returns {string} The message in red\r\n   */\r\n  public static red(message: Readonly<IMessage>): string {\r\n    return this._format(message, `red`);\r\n  }\r\n\r\n  public static blue(message: Readonly<IMessage>): string {\r\n    return this._format(message, `blue`);\r\n  }\r\n\r\n  public static bold(message: Readonly<IMessage>): string {\r\n    return this._format(message, `bold`);\r\n  }\r\n\r\n  private static _format(message: Readonly<IMessage>, style: keyof Modifier | keyof ForegroundColor): string {\r\n    return `${styles[style].open}${message}${styles[style].close}`;\r\n  }\r\n}\r\n","import { LoggerFormatService } from './logger-format.service';\r\nimport { EInputs } from '../../core/inputs/inputs.enum';\r\nimport { createInputLink } from '../link/create-input-link';\r\nimport core from '@actions/core';\r\n\r\n/**\r\n * @description\r\n * Utility to log\r\n */\r\nexport class LoggerService {\r\n  public static debug(...message: ReadonlyArray<string>): LoggerService {\r\n    core.debug(LoggerFormatService.whiteBright(message.join(` `)));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static notice(...message: ReadonlyArray<string>): LoggerService {\r\n    core.notice(LoggerFormatService.whiteBright(message.join(` `)));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static warning(...message: ReadonlyArray<string>): LoggerService {\r\n    core.warning(LoggerFormatService.whiteBright(message.join(` `)));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static error(...message: ReadonlyArray<string>): LoggerService {\r\n    core.error(LoggerFormatService.whiteBright(message.join(` `)));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static async group(message: Readonly<string>, fn: () => Promise<void>): Promise<void> {\r\n    return core.group(LoggerFormatService.whiteBright(message), fn);\r\n  }\r\n\r\n  public static startGroup(name: Readonly<string>): LoggerService {\r\n    core.startGroup(LoggerFormatService.whiteBright(name));\r\n\r\n    return this;\r\n  }\r\n\r\n  public static endGroup(): LoggerService {\r\n    core.endGroup();\r\n\r\n    return this;\r\n  }\r\n\r\n  public static input(input: Readonly<EInputs>): string {\r\n    return LoggerFormatService.magenta(createInputLink(input));\r\n  }\r\n}\r\n","import { createLink } from './create-link';\nimport { EInputs } from '../../core/inputs/inputs.enum';\n\n/**\n * @description\n * Utility to create a link based on an input coming from the README.md\n * @param {Readonly<EInputs>} input The input to link to\n * @returns {string} A link in the markdown format pointing to the given input anchor in the README.md\n */\nexport function createInputLink(input: Readonly<EInputs>): string {\n  return createLink(input, `https://github.com/@sonia-corporation/stale#${input}`);\n}\n","import terminalLink from 'terminal-link';\n\n/**\n * @description\n * Utility to create a link used to improve the logger and debug experience\n * @param {Readonly<string>} name The name of the link\n * @param {Readonly<string>} link The URL associated\n * @returns {string} A link in the markdown format\n */\nexport function createLink(name: Readonly<string>, link: Readonly<string>): string {\n  return terminalLink(name, link);\n}\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}